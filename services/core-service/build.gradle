buildscript {
    repositories {
        jcenter()
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-noarg'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

group 'com.yoloo.server'
version '0.0.1-SNAPSHOT'

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    jcenter()
    maven { url "https://repo.spring.io/milestone" }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

noArg {
    annotation("com.yoloo.server.common.util.NoArg")
}

configurations.all {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    exclude group: 'ch.qos.logback', module: 'logback-core'
    exclude group: 'ch.qos.logback', module: 'logback-classic'
    exclude group: 'org.slf4j', module: 'jul-to-slf4j'
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
}

dependencies {
    implementation project(':yoloo.spring.autoconfiguration.objectify')
    implementation project(':yoloo.spring.autoconfiguration.appengine')
    implementation project(':yoloo.spring.autoconfiguration.firebase')
    implementation project(':yoloo.spring.autoconfiguration.idGenerator')
    implementation project(':utils')
    implementation project(':yoloo.spring.rest.exception')
    implementation project(':yoloo.spring.rest.auth.firebase')

    // App Engine
    implementation "com.google.appengine:appengine-api-1.0-sdk:$appengineVersion"
    compileOnly "javax.servlet:javax.servlet-api:$javaxServletVersion"

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.cloud:spring-cloud-gcp-starter-pubsub'
    compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    implementation 'com.lmax:disruptor:3.4.2'

    // Kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    // Util
    implementation 'net.cinnom:nano-cuckoo:2.0.0'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.zalando:problem-spring-web:0.24.0-RC.0'

    // Testing
    testImplementation "org.junit.jupiter:junit-jupiter-api:${jUnit5Version}"
    testImplementation "org.junit.vintage:junit-vintage-engine:${jUnit5Version}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${jUnit5Version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jUnit5Version}"

    testImplementation "com.google.appengine:appengine-testing:$appengineVersion"
    testImplementation 'com.google.truth:truth:0.42'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    //testImplementation "com.google.appengine:appengine-api-stubs:$appengineVersion"
    //testImplementation "com.google.appengine:appengine-testing:$appengineVersion"
    //testImplementation "com.google.appengine:appengine-tools-sdk:$appengineVersion"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
